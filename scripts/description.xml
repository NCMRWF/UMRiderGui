<?xml version="1.0" encoding="utf-8"?>

<form>

<title> FILL THE DETAILS BELOW . . . </title>
<end>UMRiderGui N.C.M.R.W.F </end>
<message> Creating setup.cfg file for UMRider</message>



<global>
<varsfile> description_global_vars.xml </varsfile>
<bsub> description_global_bsubs.xml </bsub>
<objects>

	<object>
		<label> UMInAnlFiles </label>
		<tag> UM analysis files </tag>
		<description> 
UMInAnlFiles takes list of absolute filenames which has
correct analysis fieldsfile/pp file of UM model valid
at 00UTC.

None option will take hardcoded proper infile names.
		</description>
		<inputType> checkbox </inputType>
		<script> </script>
		<validVals>
			<validVal> qwqg00.pp0 </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> UMInShortFcstFiles </label>
		<tag> UM Short forecast files </tag>
		<description>
UMInShortFcstFiles takes list of partial filenames which has
short forecast (kind of analysis) fieldsfile/pp files of UM 
model produced for 00UTC, 06UTC, 12UTC, 18UTC.

None option will take hardcoded proper infile names.
		</description>
		<inputType> checkbox </inputType>
		<script> </script>
		<validVals>
			<validVal> umglca_pb </validVal>
			<validVal> umglca_pd </validVal>
			<validVal> umglca_pe </validVal>
			<validVal> umglca_pf </validVal>
			<validVal> umglca_pi </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> UMInLongFcstFiles </label>
		<tag> UM long forecast files </tag>
		<description>
UMInLongFcstFiles takes list of partial filenames which has
long forecast fieldsfile/pp file of UM model based on 
reference time at 00UTC, 12UTC.

None option will take hardcoded proper infile names.
		</description>
		<inputType> checkbox </inputType>
		<script> </script>
		<validVals>
			<validVal> umglaa_pb </validVal>
			<validVal> umglaa_pd </validVal>
			<validVal> umglaa_pe </validVal>
			<validVal> umglaa_pf </validVal>
			<validVal> umglaa_pi </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> inPath </label>
		<tag> input files path </tag>
		<description>
Model pp filedsfiles path till date timestamp directory.

For NCUM Global inPath = /gpfs3/home/umfcst/NCUM/fcst/
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> outPath </label>
		<tag> output files path </tag>
		<description>
Model grib2 files path where all grib2/nc files will be stored.

For eg : /gpfs4/home/[USERNAME]/UMRiderOutput/g2files/
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> tmpPath </label>
		<tag> temp path </tag>
		<description>
Temporary directory (used to create temporary log files)

You can checkout the log files in case of bsub jobs get failed.

For eg : /gpfs4/home/[USERNAME]/UMRiderOutput/logs/
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> anl_step_hour </label>
		<tag> analysis step hour </tag>
		<description>
Analysis step/interval hours. By default it takes 6 hour which
mean um2grb2 produce 6 hourly instantaneous and/or 6 hourly
average and/or 6 hourly accumulation values analysis files.

If user specfied as 3 then it will extract only 3 houlry 
instantaneous fields.

By default model produced 3 hourly average/accumulation.

Note: the average and accumulation supports only for 6 hours!
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> anl_aavars_reference_time </label>
		<tag> analysis aavars reference time </tag>
		<description>
anl_aavars_reference_time takes either 'analysis' or 
'shortforecast'. When some variables are taken from previous
cycle short-forecast (average/accumulation) vars, the 
reference time need to be set as either current 'analysis'
reference cycle (utc) or previous cycle's 'shortforecast'
reference time.

'shortforecast' gives exactly based on which utc that 
variable has processed, whereas 'analysis' shift reference
time utc as actual analysis utc time.

Note : This option applicable only to average/accumulation
vars in analysis grib2 files.

Lets keep default option (i.e. shortforecast)
		</description>
		<inputType> radio </inputType>
		<script> </script>
		<validVals>
			<validVal> shortforecast </validVal>
			<validVal> analysis </validVal>
		</validVals>
		<default> shortforecast </default>
		<comment> </comment>
	</object>


	<object>
		<label> anl_aavars_time_bounds </label>
		<tag> analysis aavars time bounds </tag>
		<description>
anl_aavars_time_bounds takes either 'True' or 'False'. 
By default, True keeps the analysis time bounds, reference
time bounds and False removes it (so that it become 
instantaneous instead of average/accumulation vars).

False will be applicable only if anl_aavars_reference_time
arg passed as 'analysis'.

Note : This option applicable only to average/accumulation
vars in analysis grib2 files.

For post prodction, we enabled the time bounds with True.
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> True </default>
		<comment> </comment>
	</object>

	<object>
		<label> fcst_step_hour </label>
		<tag> forecast step hour </tag>
		<description>
long forecast step/interval hours . By default it
takes 6 hour which mean UMRider produce 6 hourly instantaneous
and/or 6 hourly average and/or 6 hourly accumulation values.

If user specfied as 3 or 24 then it will extract only 3 or 24
hourly instantaneous fields and for calculate average / 
accumulation for 24 hourly.

By default model produced 3 hourly average/accumulation.

Note: the average and accumulation supports only for either 
3 or 6 or 24 hours.
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> start_long_fcst_hour </label>
		<tag> start of long forecast hour </tag>
		<description>
long forecast start hour. By default it takes 6 hour which
mean UMRider produce grib2 files from 06-th hour forecasts.

If user wants from different hours, then they can specify it!

It should be multiples of 'fcst_step_hour' (see above option).
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> end_long_fcst_hour_at_00z </label>
		<tag> end of long forecast hour at 00 </tag>
		<description>
Maximum long forecast hours at 00 utc cycle produced by NCUM
model for 10 days forecast 240 hour (by default 240 hours).
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> end_long_fcst_hour_at_12z </label>
		<tag> end of long forecast hour at 12 </tag>
		<description>
Maximum long forecast hours at 12utc cycle produced by NCUM
model for 5 days forecast 120 hour (by default 120 hours).
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> latitude </label>
		<tag> latitudes </tag>
		<description>
latitude takes required range of latitude which user wants to
extract from the model global data. 
By default it takes None (i.e. extract model global latitudes).

User can specify their required latitude in tuple!

For eg1 : latitude = (-30, 30) will extract only latitudes
from 30S to 30N. (i.e South to North)

For eg2 : latitude = (30, -30) will extract only latitudes
from 30N to 30S. (i.e North to South)

		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> longitude </label>
		<tag> longitudes </tag>
		<description>
longitude takes required range of longitude which user wants
to extract from the model global data. 
By default it takes None (i.e. extract model global 
longitudes).

User can specify their required longitude in tuple!

For eg : longitude = (60, 100) will extract only longitude
from 60E to 100E.

Note : Model requires longitude should specfied based on
(0 to 360), and not by (-180 to 180.) 

In future I may fix it, if user wish to specify longitude
by within range of (-180, 180) !?
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> targetGridResolution </label>
		<tag> target grid's resolution </tag>
		<description>
targetGridResolution is resolution in degree 
(1 degree = 100km approx).

if targetGridResolution is set to None, then model resolution
will be kept in the grib2 file. This must be a number or None.

WARNING :  targetGridResolution option will be disabled 
           if targetGridFile option is enabled (see below).
		</description>
		<inputType> float </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> targetGridFile </label>
		<tag> target of grid file </tag>
		<description>
targetGridFile should be path of sample grib2/pp/ff/nc file,
which contains atleast one variable with latitude, longitude
informations. 

Model variables will be converted to this target grid file's
resolution including spatial regrid, start-end of 
latitude-and-longitude.
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> extraPolateMethod </label>
		<tag> extra polation method </tag>
		<description>
extraPolateMethod takes either 'auto' or 'linear' or 'mask' or
iris supported interpolation method. 
'linear' means all variables will be linearly extrapolated
over masked regions also. 'mask' means all masked variables
of model outputs, will not be extrapolated over masked regions.

'auto' will take care properly the neccessary variabels will
be extrapolated over masked regions and remaining variables 
will be masked over mask regions. 

Note : 'auto' options is suggested one!
		</description>
		<inputType> radio </inputType>
		<script> </script>
		<validVals>
			<validVal> auto </validVal>
			<validVal> linear </validVal>
			<validVal> mask </validVal>
		</validVals>
		<default> auto </default>
		<comment> </comment>
	</object>

	<object>
		<label> pressureLevels </label>
		<tag> pressure levels </tag>
		<description>
pressureLevels is required pressure levels slice / extract
only particular set of pressure levels from model pressure
levels. User can specify either one or more levels. 

By default it takes None, i.e. it will extract all the
model pressure levels.

For eg 1 : pressureLevels = [850] -> extract 850 hPa only.
For eg 2 : pressureLevels = [850, 500, 200] -> extract 
850, 500, 200 hPa levels only.

Note 1 : These pressure slice levels applicable to all the
         pressure level variables.
         
Note 2 : At the moment pressure levels interpolation is not 
         supported yet!
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> fillFullyMaskedVars </label>
		<tag> fill fully masked vars with </tag>
		<description>
If some variable has fully masked (for eg: Incoming Shortwave
flux during night time) then this option value will be set to
that variable. 

By default it takes None, which won't do anything. 

If it has set to 0 as value, then those fully masked vars 
will be filled with this value (zero).
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> soilFirstSecondFixedSurfaceUnit </label>
		<tag> soil first and second fixed surface height unit </tag>
		<description>
soilFirstSecondFixedSurfaceUnit takes either 'cm' or 'mm'. 
By default it takes 'cm' argument (suggested for general 
purpose/ WRF-Noah supported).

For soil moisture/ soil temeperature variables depth 
below land surface, units are initially set to either 
'cm' (centimeter) or 'mm' (millimeter), and finally 
converted to 'm' (meter) in wgrib2. 

But anyhow if grib2 files will be read by some other utility
other than wgrib2, then this first and second fixed surface 
unit plays matter. So suggested unit is 'cm'.
		</description>
		<inputType> radio </inputType>
		<script> </script>
		<validVals>
			<validVal> m </validVal>
			<validVal> cm </validVal>
		</validVals>
		<default> cm </default>
		<comment> </comment>
	</object>

	<object>
		<label> loadg2utils </label>
		<tag> load g2utils </tag>
		<description>
Load g2utils from 'system' python which has installed through
setup.py (OR) load g2utils from 'local' previous directory
for the operational purpose, where normal user do not have
write permission to change the g2utils!

So loadg2utils argument should be either 'system' or 'local'.

Note : Use 'local' for Bhaskara HPC. 
		</description>
		<inputType> radio </inputType>
		<script> </script>
		<validVals>
			<validVal> local </validVal>
			<validVal> system </validVal>
		</validVals>
		<default> local </default>
		<comment> </comment>
	</object>

	<object>
		<label> overwriteFiles </label>
		<tag> overwrite out files </tag>
		<description>
If overwriteFiles option is 'True' then existing output 
final files (if any) will be deleted from outPath and 
re-creating outfiles freshly.

If overwriteFiles option is 'False' and all output final 
files already exist in the outPath, then program will exit
without re-creating the output files.

If partially created files exist (like few hours outfiles 
only exist or intermediate nc files) then by default make 
overwriteFiles option as True (though False as passed to 
overwriteFiles option).
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> True </default>
		<comment> </comment>
	</object>

    <object>
		<label> anlOutGrib2FilesNameStructure </label>
		<tag> anlysis out grib2 files name structure </tag>
		<description>
Defining analysis grib2 fileName structure.
Must be in single line.

anlOutGrib2FilesNameStructure takes list of string naming
arguments to construct out file names. um2grb2 will just
concatinate the arguments, by replacing 5 predefined naming
structure ('*DD*', '*HHH*', '*YYYYMMDD*', '*ZZ*', '*pxp*') 
with its corresponding values/numbers inplace of it.

'*H*' - forecast hours
'*YYYYMMDD*' - forecast reference date 
'*Z*' - forecast reference utc time (optional)
'*D*' - forecast days (optional)
'*pXp*' - latitude x longitude grid resolution (optional)

If user wants to 3 digit filled hours, then they need to 
specify as 3 times '*HHH*'. If they specify 2 digit filled
hours (say '*HH*' only), but forecast hours have 3 digit, 
then by default it will assume as 3 digits but for single 
digit hour, it will fill 0 as prefix to make it as 2 digit.

Similar options for utc '*Z*' and '*D*'.


Note : * will not be included in the name of the final 
out grib2 files.

eg1 :  ('um_ana', '_', '*HHH*', 'hr', '_', '*YYYYMMDD*', '_', '*ZZ*', 'Z', '.grib2')
this will produce analysis files as 'um_ana_006hr_20160208_12Z.grib2'

eg2 : ('fcs', '_', '*HH*', 'h', '_z', '*YYYYMMDD*', '.grb2') 
this will produce forecast files as 'fcs_06h_z20160208.grb2'


eg3 : ('prg', '*D*', '00z', '*%d%m%y*', '.grb2') will produce 
grib2 files as 'prg100z080216.grb2'

eg4 : ('prg', '*D*', '00z', '*%d%m%y*', '_', '*pXp*' '.grb2') 
will produce grib2 files as 'prg100z080216_0p17x0p17.grb2' 
in case of targetGridResolution = None (i.e modelResolution)  
or as 'prg100z080216_2p5x2p5.grb2' in case of 
targetGridResolution = 2.5
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>
    
    <object>
		<label> fcstOutGrib2FilesNameStructure </label>
		<tag> fcst out grib2 files name structure </tag>
		<description>
Defining forecast grib2 fileName structure.
Must be in single line.

Same description as above option (anlOutGrib2FilesNameStructure)

For eg : ('um_prg', '_', '*HHH*', 'hr', '_', '*YYYYMMDD*', '_', '*ZZ*', 'Z', '.grib2')
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> createGrib2CtlIdxFiles </label>
		<tag> create grib2 ctl idx files </tag>
		<description>
If createCtlIdxFiles is True then UMRider will create grads
control files and its index files for each and every grib2 
files by using g2ctl.pl
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> True </default>
		<comment> </comment>
	</object>

	<object>
		<label> convertGrib2FilestoGrib1Files </label>
		<tag> convert grib2 files to grib1 files </tag>
		<description>
If convertGrib2FilestoGrib1Files is True then using
'cnvgrib -g21' command line UMRider will convert grib2
files to grib1 files.

CAUTION : It may produce invalid variables names, grib1
param code for few variables which are produced by this
UMRider conversion tool !
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> False </default>
		<comment> </comment>
	</object>

	<object>
		<label> grib1FilesNameSuffix </label>
		<tag> grib1 files name suffix </tag>
		<description>
If grib1FilesNameSuffix is '.grib1', then grib1 files will
endswith '.grib1' (default).

otherwise whatever string assigned will be added at the 
end of grib1 files name. 

None will add nothing to grib1 file names at the end of it.
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> removeGrib2FilesAfterGrib1FilesCreated </label>
		<tag> remove grib2 files after grib1 files created </tag>
		<description>
If removeGrib2FilesAfterGrib1FilesCreated is True, then grib2
files will be deleted and kept only grib1 files. 

By default True.
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> False </default>
		<comment> </comment>
	</object>


	<object>
		<label> createGrib1CtlIdxFiles </label>
		<tag> create grib1 ctl idx files </tag>
		<description>
If createCtlIdxFiles is True then UMRider will create grads
control files and its index files for each and every grib1 
files by using grib2ctl.pl
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> False </default>
		<comment> </comment>
	</object>

	<object>
		<label> debug </label>
		<tag> debug </tag>
		<description>
This debug option should be either True or False. 
This will just print extra information like variables details,
shape, execution process, etc., while executing the program.
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> False </default>
		<comment> </comment>
	</object>

	<object>
		<label> setGrib2TableParameters </label>
		<tag> set grib2 table parameters </tag>
		<description>
setGrib2TableParameters option takes list of tuples which may
contain WMO-Grib2 table parameters and its value. 

Which means, the grib2 table parameter options will be 
overwritten as per user's setting in this option.

eg1 : setGrib2TableParameters = [('centre', 28), ('subCentre', 0)]
The above two options will be set to out grib2 files.

eg2 : setGrib2TableParameters = [('shapeOfTheEarth', 0)]
The above option will be set to out grib2 files.

CATUION : User must be aware on what are they setting in this
option and its causes in out grib2 files! 

By default this option takes None.
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> wgrib2Arguments </label>
		<tag> wgrib2 command arguments </tag>
		<description>
After successfully created the grib2 (final ordered
variables) file, wgrib2 commnad will be executed with
the 'wgrib2Arguments' options.

pygrib/IRIS/UMRider is able to write grib2 file with 
"grid_simple" packing algorithm, whereas wgrib2 able
to convert packing from "grid_simple" to
"grid_complex_spatial_differencing"
by setting -set_grib_type complex2 option in it. 

The second type packing reduces file size 1/3 compare
to first type packing. And further can be reduced the
file size, by passing -set_bin_prec 12 (compatible
same as ECMWF) which reduces the floating points
precision (which further reduces the file size 1/5 th
of original of first packing). 

By default wgrib2Arguments takes 
"-set_grib_type complex2 -grib_out" as argument.
User can override this option by including extra wgrib2
arguments Or None (wgrib2 will not be executed).

-grib_out is important argument (to be compress,
set precsion, etc).

For more details see,
http://www.cpc.ncep.noaa.gov/products/wesley/wgrib2/speed.html
http://www.cpc.ncep.noaa.gov/products/wesley/wgrib2/set_bin_prec.html

For global post out, we are not passing 
-set_bin_prec 12 option, because we should not loose 
floating precision information.
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>
	
<object>
		<label> wgrib2netcdf </label>
		<tag> wgrib2netcdf </tag>
		<description>
if wgrib2netcdf enabled then grib2 file will be converted to netcdf via 
wgrib2 command and removed the grib2 source files.
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default>False</default>
		<comment> </comment>
	</object>
	
	<object>
		<label> callBackScript </label>
		<tag> call back script </tag>
		<description>
This callBackScript option takes any user defined script
(any script)!

User should provide absolute or relative path of their 
script and make sure that script is self executable with 
shebang and executable permission!

After successfully created out grib2 files, this
callBackScript will be executed with possibly command
line keyword arguments as follows

KWargs : (date, outpath, oftype, utc)
where '--date'    -> out files processed date,
      '--outpath' -> out files path,
      '--oftype'  -> 'analysis' or 'forecast'
      '--utc'     -> UTC cycle value in string
                 ('00' or '06' or '12' or '18')
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

</objects>

</global>


<regional>
<varsfile> description_regional_vars.xml </varsfile>
<bsub> description_regional_bsubs.xml </bsub>
<objects>

	<object>
		<label> UMInLongFcstFiles </label>
		<tag> UM long forecast files </tag>
		<description>
UMInLongFcstFiles takes list of partial filenames which has
long forecast fieldsfile/pp file of UM model based on 
reference time at 00UTC, 12UTC.

None option will take hardcoded proper infile names.
		</description>
		<inputType> checkbox </inputType>
		<script> </script>
		<validVals>
			<validVal> umgsaa_pb </validVal>
			<validVal> umgsaa_pd </validVal>
			<validVal> umgsaa_pe </validVal>
			<validVal> umgsaa_pf </validVal>
			<validVal> umgsaa_pi </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> inPath </label>
		<tag> input files path </tag>
		<description>
Model pp filedsfiles path till date timestamp directory.

For NCUM Regional inPath = /gpfs3/home/umfcst/UM_REG/fcst/
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> outPath </label>
		<tag> output files path </tag>
		<description>
Model grib2 files path where all grib2/nc files will be stored.

For eg : /gpfs4/home/[USERNAME]/UMRiderOutput/g2files/
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> tmpPath </label>
		<tag> temp path </tag>
		<description>
Temporary directory (used to create temporary log files)

You can checkout the log files in case of bsub jobs get failed.

For eg : /gpfs4/home/[USERNAME]/UMRiderOutput/logs/
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> anl_step_hour </label>
		<tag> analysis step hour </tag>
		<description>
Analysis step/interval hours. By default it takes 6 hour which
mean um2grb2 produce 6 hourly instantaneous and/or 6 hourly
average and/or 6 hourly accumulation values analysis files.

If user specfied as 3 then it will extract only 3 houlry 
instantaneous fields.

By default model produced 3 hourly average/accumulation.

Note: the average and accumulation supports only for 6 hours!

NOTE : Fill this option as 0, since NCUM Reg model 
       do not produce analysis files.
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> anl_aavars_reference_time </label>
		<tag> analysis aavars reference time </tag>
		<description>
anl_aavars_reference_time takes either 'analysis' or 
'shortforecast'. When some variables are taken from previous
cycle short-forecast (average/accumulation) vars, the 
reference time need to be set as either current 'analysis'
reference cycle (utc) or previous cycle's 'shortforecast'
reference time.

'shortforecast' gives exactly based on which utc that 
variable has processed, whereas 'analysis' shift reference
time utc as actual analysis utc time.

Note : This option applicable only to average/accumulation
vars in analysis grib2 files.

Lets keep default option (i.e. shortforecast)
		</description>
		<inputType> radio </inputType>
		<script> </script>
		<validVals>
			<validVal> shortforecast </validVal>
			<validVal> analysis </validVal>
		</validVals>
		<default> shortforecast </default>
		<comment> </comment>
	</object>


	<object>
		<label> anl_aavars_time_bounds </label>
		<tag> analysis aavars time bounds </tag>
		<description>
anl_aavars_time_bounds takes either 'True' or 'False'. 
By default, True keeps the analysis time bounds, reference
time bounds and False removes it (so that it become 
instantaneous instead of average/accumulation vars).

False will be applicable only if anl_aavars_reference_time
arg passed as 'analysis'.

Note : This option applicable only to average/accumulation
vars in analysis grib2 files.

For post prodction, we enabled the time bounds with True.
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> True </default>
		<comment> </comment>
	</object>

	<object>
		<label> fcst_step_hour </label>
		<tag> forecast step hour </tag>
		<description>
long forecast step/interval hours . By default it
takes 6 hour which mean UMRider produce 6 hourly instantaneous
and/or 6 hourly average and/or 6 hourly accumulation values.

If user specfied as 1 or 3 or 24 then it will extract only 1 or 3 or 24
hourly instantaneous fields and for calculate average / 
accumulation for 1 or 3 or 24 hourly.

By default model produced 1 hourly average/accumulation.

Note: the average and accumulation supports only for either 
1 or 3 or 6 or 24 hours.
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> start_long_fcst_hour </label>
		<tag> start of long forecast hour </tag>
		<description>
long forecast start hour. By default it takes 6 hour which
mean UMRider produce grib2 files from 06-th hour forecasts.

If user wants from different hours, then they can specify it!

It should be multiples of 'fcst_step_hour' (see above option).
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> end_long_fcst_hour_at_00z </label>
		<tag> end of long forecast hour at 00 </tag>
		<description>
Maximum long forecast hours at 00 utc cycle produced by NCUM
model for 3 days forecast 72 hour.
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> end_long_fcst_hour_at_12z </label>
		<tag> end of long forecast hour at 12 </tag>
		<description>
Maximum long forecast hours at 12utc cycle produced by NCUM
model for 3 days forecast 72 hour.
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> latitude </label>
		<tag> latitudes </tag>
		<description>
latitude takes required range of latitude which user wants to
extract from the model global data. 
By default it takes None (i.e. extract model regional latitudes).

User can specify their required latitude in tuple!

For eg1 : latitude = (-5, 40) will extract only latitudes
from 5S to 40N. (i.e South to North)

For eg2 : latitude = (40, -5) will extract only latitudes
from 40N to 5S. (i.e North to South)

		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> longitude </label>
		<tag> longitudes </tag>
		<description>
longitude takes required range of longitude which user wants
to extract from the model global data. 
By default it takes None (i.e. extract model regional 
longitudes).

User can specify their required longitude in tuple!

For eg : longitude = (60, 100) will extract only longitude
from 60E to 100E.

Note : Model requires longitude should specfied based on
(0 to 360), and not by (-180 to 180.) 

In future I may fix it, if user wish to specify longitude
by within range of (-180, 180) !?
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> targetGridResolution </label>
		<tag> target grid's resolution </tag>
		<description>
targetGridResolution is resolution in degree 
(1 degree = 100km approx).

if targetGridResolution is set to None, then model resolution
will be kept in the grib2 file. This must be a number or None.

WARNING :  targetGridResolution option will be disabled 
           if targetGridFile option is enabled (see below).
		</description>
		<inputType> float </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> targetGridFile </label>
		<tag> target of grid file </tag>
		<description>
targetGridFile should be path of sample grib2/pp/ff/nc file,
which contains atleast one variable with latitude, longitude
informations. 

Model variables will be converted to this target grid file's
resolution including spatial regrid, start-end of 
latitude-and-longitude.

For eg1: Setting the following path will produce 0.04x0.04 degree
NCUM Regional model from 7N to 38N (latitude) and 67E to 98E 
(longitude) domain.

/gpfs2/home/umfcst/ShortJobs/UMRider/UMRRun/data/sample_ind_7-38N_67-98E_0p04X0p04.grib2

For eg1: Setting the following path will produce 0.04x0.04 degree
NCUM Regional model fullly available domain.

/gpfs2/home/umfcst/ShortJobs/UMRider/UMRRun/data/sample_ind_reg_full_0p04X0p04.grib2
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> extraPolateMethod </label>
		<tag> extra polation method </tag>
		<description>
extraPolateMethod takes either 'auto' or 'linear' or 'mask' or
iris supported interpolation method. 
'linear' means all variables will be linearly extrapolated
over masked regions also. 'mask' means all masked variables
of model outputs, will not be extrapolated over masked regions.

'auto' will take care properly the neccessary variabels will
be extrapolated over masked regions and remaining variables 
will be masked over mask regions. 

Note : 'auto' options is suggested one!
		</description>
		<inputType> radio </inputType>
		<script> </script>
		<validVals>
			<validVal> auto </validVal>
			<validVal> linear </validVal>
			<validVal> mask </validVal>
		</validVals>
		<default> auto </default>
		<comment> </comment>
	</object>

	<object>
		<label> pressureLevels </label>
		<tag> pressure levels </tag>
		<description>
pressureLevels is required pressure levels slice / extract
only particular set of pressure levels from model pressure
levels. User can specify either one or more levels. 

By default it takes None, i.e. it will extract all the
model pressure levels.

For eg 1 : pressureLevels = [850] -> extract 850 hPa only.
For eg 2 : pressureLevels = [850, 500, 200] -> extract 
850, 500, 200 hPa levels only.

Note 1 : These pressure slice levels applicable to all the
         pressure level variables.
         
Note 2 : At the moment pressure levels interpolation is not 
         supported yet!
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> fillFullyMaskedVars </label>
		<tag> fill fully masked vars with </tag>
		<description>
If some variable has fully masked (for eg: Incoming Shortwave
flux during night time) then this option value will be set to
that variable. 

By default it takes None, which won't do anything. 

If it has set to 0 as value, then those fully masked vars 
will be filled with this value (zero).
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> soilFirstSecondFixedSurfaceUnit </label>
		<tag> soil first and second fixed surface height unit </tag>
		<description>
soilFirstSecondFixedSurfaceUnit takes either 'cm' or 'mm'. 
By default it takes 'cm' argument (suggested for general 
purpose/ WRF-Noah supported).

For soil moisture/ soil temeperature variables depth 
below land surface, units are initially set to either 
'cm' (centimeter) or 'mm' (millimeter), and finally 
converted to 'm' (meter) in wgrib2. 

But anyhow if grib2 files will be read by some other utility
other than wgrib2, then this first and second fixed surface 
unit plays matter. So suggested unit is 'cm'.
		</description>
		<inputType> radio </inputType>
		<script> </script>
		<validVals>
			<validVal> m </validVal>
			<validVal> cm </validVal>
		</validVals>
		<default> cm </default>
		<comment> </comment>
	</object>

	<object>
		<label> loadg2utils </label>
		<tag> load g2utils </tag>
		<description>
Load g2utils from 'system' python which has installed through
setup.py (OR) load g2utils from 'local' previous directory
for the operational purpose, where normal user do not have
write permission to change the g2utils!

So loadg2utils argument should be either 'system' or 'local'.

Note : Use 'local' for Bhaskara HPC. 
		</description>
		<inputType> radio </inputType>
		<script> </script>
		<validVals>
			<validVal> local </validVal>
			<validVal> system </validVal>
		</validVals>
		<default> local </default>
		<comment> </comment>
	</object>

	<object>
		<label> overwriteFiles </label>
		<tag> overwrite out files </tag>
		<description>
If overwriteFiles option is 'True' then existing output 
final files (if any) will be deleted from outPath and 
re-creating outfiles freshly.

If overwriteFiles option is 'False' and all output final 
files already exist in the outPath, then program will exit
without re-creating the output files.

If partially created files exist (like few hours outfiles 
only exist or intermediate nc files) then by default make 
overwriteFiles option as True (though False as passed to 
overwriteFiles option).
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> True </default>
		<comment> </comment>
	</object>

    <object>
		<label> anlOutGrib2FilesNameStructure </label>
		<tag> anlysis out grib2 files name structure </tag>
		<description>
Defining analysis grib2 fileName structure.
Must be in single line.

anlOutGrib2FilesNameStructure takes list of string naming
arguments to construct out file names. um2grb2 will just
concatinate the arguments, by replacing 5 predefined naming
structure ('*DD*', '*HHH*', '*YYYYMMDD*', '*ZZ*', '*pxp*') 
with its corresponding values/numbers inplace of it.

'*H*' - forecast hours
'*YYYYMMDD*' - forecast reference date 
'*Z*' - forecast reference utc time (optional)
'*D*' - forecast days (optional)
'*pXp*' - latitude x longitude grid resolution (optional)

If user wants to 3 digit filled hours, then they need to 
specify as 3 times '*HHH*'. If they specify 2 digit filled
hours (say '*HH*' only), but forecast hours have 3 digit, 
then by default it will assume as 3 digits but for single 
digit hour, it will fill 0 as prefix to make it as 2 digit.

Similar options for utc '*Z*' and '*D*'.


Note : * will not be included in the name of the final 
out grib2 files.

eg1 :  ('um_ana', '_', '*HHH*', 'hr', '_', '*YYYYMMDD*', '_', '*ZZ*', 'Z', '.grib2')
this will produce analysis files as 'um_ana_006hr_20160208_12Z.grib2'

eg2 : ('fcs', '_', '*HH*', 'h', '_z', '*YYYYMMDD*', '.grb2') 
this will produce forecast files as 'fcs_06h_z20160208.grb2'


eg3 : ('prg', '*D*', '00z', '*%d%m%y*', '.grb2') will produce 
grib2 files as 'prg100z080216.grb2'

eg4 : ('prg', '*D*', '00z', '*%d%m%y*', '_', '*pXp*' '.grb2') 
will produce grib2 files as 'prg100z080216_0p17x0p17.grb2' 
in case of targetGridResolution = None (i.e modelResolution)  
or as 'prg100z080216_2p5x2p5.grb2' in case of 
targetGridResolution = 2.5
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>
    
    <object>
		<label> fcstOutGrib2FilesNameStructure </label>
		<tag> fcst out grib2 files name structure </tag>
		<description>
Defining forecast grib2 fileName structure.
Must be in single line.

Same description as above option (anlOutGrib2FilesNameStructure)

For eg : ('ncum_reg_fcst', '_', '*HHH*', 'hr', '_', '*YYYYMMDD*', '_', '*ZZ*', 'Z', '.grib2')
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> createGrib2CtlIdxFiles </label>
		<tag> create grib2 ctl idx files </tag>
		<description>
If createCtlIdxFiles is True then UMRider will create grads
control files and its index files for each and every grib2 
files by using g2ctl.pl
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> True </default>
		<comment> </comment>
	</object>

	<object>
		<label> convertGrib2FilestoGrib1Files </label>
		<tag> convert grib2 files to grib1 files </tag>
		<description>
If convertGrib2FilestoGrib1Files is True then using
'cnvgrib -g21' command line UMRider will convert grib2
files to grib1 files.

CAUTION : It may produce invalid variables names, grib1
param code for few variables which are produced by this
UMRider conversion tool !
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> False </default>
		<comment> </comment>
	</object>

	<object>
		<label> grib1FilesNameSuffix </label>
		<tag> grib1 files name suffix </tag>
		<description>
If grib1FilesNameSuffix is '.grib1', then grib1 files will
endswith '.grib1' (default).

otherwise whatever string assigned will be added at the 
end of grib1 files name. 

None will add nothing to grib1 file names at the end of it.
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> removeGrib2FilesAfterGrib1FilesCreated </label>
		<tag> remove grib2 files after grib1 files created </tag>
		<description>
If removeGrib2FilesAfterGrib1FilesCreated is True, then grib2
files will be deleted and kept only grib1 files. 

By default True.
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> False </default>
		<comment> </comment>
	</object>


	<object>
		<label> createGrib1CtlIdxFiles </label>
		<tag> create grib1 ctl idx files </tag>
		<description>
If createCtlIdxFiles is True then UMRider will create grads
control files and its index files for each and every grib1 
files by using grib2ctl.pl
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> False </default>
		<comment> </comment>
	</object>

	<object>
		<label> debug </label>
		<tag> debug </tag>
		<description>
This debug option should be either True or False. 
This will just print extra information like variables details,
shape, execution process, etc., while executing the program.
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> False </default>
		<comment> </comment>
	</object>

	<object>
		<label> setGrib2TableParameters </label>
		<tag> set grib2 table parameters </tag>
		<description>
setGrib2TableParameters option takes list of tuples which may
contain WMO-Grib2 table parameters and its value. 

Which means, the grib2 table parameter options will be 
overwritten as per user's setting in this option.

eg1 : setGrib2TableParameters = [('centre', 28), ('subCentre', 0)]
The above two options will be set to out grib2 files.

eg2 : setGrib2TableParameters = [('shapeOfTheEarth', 0)]
The above option will be set to out grib2 files.

CATUION : User must be aware on what are they setting in this
option and its causes in out grib2 files! 

By default this option takes None.
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> wgrib2Arguments </label>
		<tag> wgrib2 command arguments </tag>
		<description>
After successfully created the grib2 (final ordered
variables) file, wgrib2 commnad will be executed with
the 'wgrib2Arguments' options.

pygrib/IRIS/UMRider is able to write grib2 file with 
"grid_simple" packing algorithm, whereas wgrib2 able
to convert packing from "grid_simple" to
"grid_complex_spatial_differencing"
by setting -set_grib_type complex2 option in it. 

The second type packing reduces file size 1/3 compare
to first type packing. And further can be reduced the
file size, by passing -set_bin_prec 12 (compatible
same as ECMWF) which reduces the floating points
precision (which further reduces the file size 1/5 th
of original of first packing). 

By default wgrib2Arguments takes 
"-set_grib_type complex2 -grib_out" as argument.
User can override this option by including extra wgrib2
arguments Or None (wgrib2 will not be executed).

-grib_out is important argument (to be compress,
set precsion, etc).

For more details see,
http://www.cpc.ncep.noaa.gov/products/wesley/wgrib2/speed.html
http://www.cpc.ncep.noaa.gov/products/wesley/wgrib2/set_bin_prec.html

For global post out, we are not passing 
-set_bin_prec 12 option, because we should not loose 
floating precision information.
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>
	
	<object>
		<label> wgrib2netcdf </label>
		<tag> wgrib2netcdf </tag>
		<description>
if wgrib2netcdf enabled then grib2 file will be converted to netcdf via 
wgrib2 command and removed the grib2 source files.
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default>False</default>
		<comment> </comment>
	</object>

	<object>
		<label> callBackScript </label>
		<tag> call back script </tag>
		<description>
This callBackScript option takes any user defined script
(any script)!

User should provide absolute or relative path of their 
script and make sure that script is self executable with 
shebang and executable permission!

After successfully created out grib2 files, this
callBackScript will be executed with possibly command
line keyword arguments as follows

KWargs : (date, outpath, oftype, utc)
where '--date'    -> out files processed date,
      '--outpath' -> out files path,
      '--oftype'  -> 'analysis' or 'forecast'
      '--utc'     -> UTC cycle value in string
                 ('00' or '06' or '12' or '18')
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

</objects>

</regional>


<ensemble>
<varsfile> description_ensemble_vars.xml </varsfile>
<bsub> description_ensemble_bsubs.xml </bsub>

<objects>

	<object>
		<label> inPath </label>
		<tag> input files path </tag>
		<description>
Model EPS pp filedsfiles path till date timestamp directory.

For NCUM Ensemble inPath = /gpfs3/home/umeps/EPS/long_fcst/LONG_OUT/
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> outPath </label>
		<tag> output files path </tag>
		<description>
Model grib2 files path where all grib2/nc files will be stored.

For eg : /gpfs4/home/[USERNAME]/UMRiderOutput/g2files/
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> tmpPath </label>
		<tag> temp path </tag>
		<description>
Temporary directory (used to create temporary log files)

You can checkout the log files in case of bsub jobs get failed.

For eg : /gpfs4/home/[USERNAME]/UMRiderOutput/logs/
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> anl_step_hour </label>
		<tag> analysis step hour </tag>
		<description>
Analysis step/interval hours. By default it takes 6 hour which
mean um2grb2 produce 6 hourly instantaneous and/or 6 hourly
average and/or 6 hourly accumulation values analysis files.

If user specfied as 3 then it will extract only 3 houlry 
instantaneous fields.

By default model produced 3 hourly average/accumulation.

Note: the average and accumulation supports only for 6 hours!
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	
	<object>
		<label> fcst_step_hour </label>
		<tag> forecast step hour </tag>
		<description>
long forecast step/interval hours . By default it
takes 6 hour which mean UMRider produce 6 hourly instantaneous
and/or 6 hourly average and/or 6 hourly accumulation values.

If user specfied as 24 then it will extract only 24
hourly instantaneous fields and for calculate average / 
accumulation for 24 hourly.

By default model produced 6 hourly average/accumulation.

Note: the average and accumulation supports only for either 
6 or 24 hours.
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> start_long_fcst_hour </label>
		<tag> start of long forecast hour </tag>
		<description>
long forecast start hour. By default it takes 6 hour which
mean UMRider produce grib2 files from 06-th hour forecasts.

If user wants from different hours, then they can specify it!

It should be multiples of 'fcst_step_hour' (see above option).

0 -> starts with 0th hour forecast of ensembles.
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> end_long_fcst_hour_at_00z </label>
		<tag> end of long forecast hour at 00 </tag>
		<description>
Maximum long forecast hours at 00 utc cycle produced by NCUM
model for 10 days forecast 240 hour (by default 240 hours).
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> end_long_fcst_hour_at_12z </label>
		<tag> end of long forecast hour at 12 </tag>
		<description>
Maximum long forecast hours at 12utc cycle produced by NCUM
model for 5 days forecast 120 hour (by default 120 hours).
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> latitude </label>
		<tag> latitudes </tag>
		<description>
latitude takes required range of latitude which user wants to
extract from the model global data. 
By default it takes None (i.e. extract model global latitudes).

User can specify their required latitude in tuple!

For eg1 : latitude = (-30, 30) will extract only latitudes
from 30S to 30N. (i.e South to North)

For eg2 : latitude = (30, -30) will extract only latitudes
from 30N to 30S. (i.e North to South)

		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> longitude </label>
		<tag> longitudes </tag>
		<description>
longitude takes required range of longitude which user wants
to extract from the model global data. 
By default it takes None (i.e. extract model global 
longitudes).

User can specify their required longitude in tuple!

For eg : longitude = (60, 100) will extract only longitude
from 60E to 100E.

Note : Model requires longitude should specfied based on
(0 to 360), and not by (-180 to 180.) 

In future I may fix it, if user wish to specify longitude
by within range of (-180, 180) !?
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> targetGridResolution </label>
		<tag> target grid's resolution </tag>
		<description>
targetGridResolution is resolution in degree 
(1 degree = 100km approx).

if targetGridResolution is set to None, then model resolution
will be kept in the grib2 file. This must be a number or None.

SUGGESTION : Use 0.35 as input to this option.

WARNING :  targetGridResolution option will be disabled 
           if targetGridFile option is enabled (see below).
		</description>
		<inputType> float </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> targetGridFile </label>
		<tag> target of grid file </tag>
		<description>
targetGridFile should be path of sample grib2/pp/ff/nc file,
which contains atleast one variable with latitude, longitude
informations. 

Model variables will be converted to this target grid file's
resolution including spatial regrid, start-end of 
latitude-and-longitude.
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> extraPolateMethod </label>
		<tag> extra polation method </tag>
		<description>
extraPolateMethod takes either 'auto' or 'linear' or 'mask' or
iris supported interpolation method. 
'linear' means all variables will be linearly extrapolated
over masked regions also. 'mask' means all masked variables
of model outputs, will not be extrapolated over masked regions.

'auto' will take care properly the neccessary variabels will
be extrapolated over masked regions and remaining variables 
will be masked over mask regions. 

Note : 'auto' options is suggested one!
		</description>
		<inputType> radio </inputType>
		<script> </script>
		<validVals>
			<validVal> auto </validVal>
			<validVal> linear </validVal>
			<validVal> mask </validVal>
		</validVals>
		<default> auto </default>
		<comment> </comment>
	</object>

	<object>
		<label> pressureLevels </label>
		<tag> pressure levels </tag>
		<description>
pressureLevels is required pressure levels slice / extract
only particular set of pressure levels from model pressure
levels. User can specify either one or more levels. 

By default it takes None, i.e. it will extract all the
model pressure levels.

For eg 1 : pressureLevels = [850] -> extract 850 hPa only.
For eg 2 : pressureLevels = [850, 500, 200] -> extract 
850, 500, 200 hPa levels only.

Note 1 : These pressure slice levels applicable to all the
         pressure level variables.
         
Note 2 : At the moment pressure levels interpolation is not 
         supported yet!
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> fillFullyMaskedVars </label>
		<tag> fill fully masked vars with </tag>
		<description>
If some variable has fully masked (for eg: Incoming Shortwave
flux during night time) then this option value will be set to
that variable. 

By default it takes None, which won't do anything. 

If it has set to 0 as value, then those fully masked vars 
will be filled with this value (zero).
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> soilFirstSecondFixedSurfaceUnit </label>
		<tag> soil first and second fixed surface height unit </tag>
		<description>
soilFirstSecondFixedSurfaceUnit takes either 'cm' or 'mm'. 
By default it takes 'cm' argument (suggested for general 
purpose/ WRF-Noah supported).

For soil moisture/ soil temeperature variables depth 
below land surface, units are initially set to either 
'cm' (centimeter) or 'mm' (millimeter), and finally 
converted to 'm' (meter) in wgrib2. 

But anyhow if grib2 files will be read by some other utility
other than wgrib2, then this first and second fixed surface 
unit plays matter. So suggested unit is 'cm'.
		</description>
		<inputType> radio </inputType>
		<script> </script>
		<validVals>
			<validVal> m </validVal>
			<validVal> cm </validVal>
		</validVals>
		<default> cm </default>
		<comment> </comment>
	</object>

	<object>
		<label> loadg2utils </label>
		<tag> load g2utils </tag>
		<description>
Load g2utils from 'system' python which has installed through
setup.py (OR) load g2utils from 'local' previous directory
for the operational purpose, where normal user do not have
write permission to change the g2utils!

So loadg2utils argument should be either 'system' or 'local'.

Note : Use 'local' for Bhaskara HPC. 
		</description>
		<inputType> radio </inputType>
		<script> </script>
		<validVals>
			<validVal> local </validVal>
			<validVal> system </validVal>
		</validVals>
		<default> local </default>
		<comment> </comment>
	</object>

	<object>
		<label> overwriteFiles </label>
		<tag> overwrite out files </tag>
		<description>
If overwriteFiles option is 'True' then existing output 
final files (if any) will be deleted from outPath and 
re-creating outfiles freshly.

If overwriteFiles option is 'False' and all output final 
files already exist in the outPath, then program will exit
without re-creating the output files.

If partially created files exist (like few hours outfiles 
only exist or intermediate nc files) then by default make 
overwriteFiles option as True (though False as passed to 
overwriteFiles option).
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> True </default>
		<comment> </comment>
	</object>

    <object>
		<label> anlOutGrib2FilesNameStructure </label>
		<tag> anlysis out grib2 files name structure </tag>
		<description>
Defining analysis grib2 fileName structure.
Must be in single line.

anlOutGrib2FilesNameStructure takes list of string naming
arguments to construct out file names. um2grb2 will just
concatinate the arguments, by replacing 5 predefined naming
structure ('*DD*', '*HHH*', '*YYYYMMDD*', '*ZZ*', '*pxp*') 
with its corresponding values/numbers inplace of it.

'*H*' - forecast hours
'*YYYYMMDD*' - forecast reference date 
'*Z*' - forecast reference utc time (optional)
'*D*' - forecast days (optional)
'*pXp*' - latitude x longitude grid resolution (optional)

If user wants to 3 digit filled hours, then they need to 
specify as 3 times '*HHH*'. If they specify 2 digit filled
hours (say '*HH*' only), but forecast hours have 3 digit, 
then by default it will assume as 3 digits but for single 
digit hour, it will fill 0 as prefix to make it as 2 digit.

Similar options for utc '*Z*' and '*D*'.


Note : * will not be included in the name of the final 
out grib2 files.

eg1 :  ('um_ana', '_', '*HHH*', 'hr', '_', '*YYYYMMDD*', '_', '*ZZ*', 'Z', '.grib2')
this will produce analysis files as 'um_ana_006hr_20160208_12Z.grib2'

eg2 : ('fcs', '_', '*HH*', 'h', '_z', '*YYYYMMDD*', '.grb2') 
this will produce forecast files as 'fcs_06h_z20160208.grb2'


eg3 : ('prg', '*D*', '00z', '*%d%m%y*', '.grb2') will produce 
grib2 files as 'prg100z080216.grb2'

eg4 : ('prg', '*D*', '00z', '*%d%m%y*', '_', '*pXp*' '.grb2') 
will produce grib2 files as 'prg100z080216_0p17x0p17.grb2' 
in case of targetGridResolution = None (i.e modelResolution)  
or as 'prg100z080216_2p5x2p5.grb2' in case of 
targetGridResolution = 2.5
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>
    
    <object>
		<label> fcstOutGrib2FilesNameStructure </label>
		<tag> fcst out grib2 files name structure </tag>
		<description>
Defining forecast grib2 fileName structure.
Must be in single line.

Same description as above option (anlOutGrib2FilesNameStructure)

For eg1 : ('umeps_prg_1cntl_44ens_24hourly', '_', 'day', '*DD*', '_', '*YYYYMMDD*', '_', '*ZZ*', 'Z', '.grib2')

For eg2 : ('umeps_prg_1cntl_44ens_6hourly', '_', 'hour', '*HH*', '_', '*YYYYMMDD*', '_', '*ZZ*', 'Z', '.grib2')
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> createGrib2CtlIdxFiles </label>
		<tag> create grib2 ctl idx files </tag>
		<description>
If createCtlIdxFiles is True then UMRider will create grads
control files and its index files for each and every grib2 
files by using g2ctl.pl
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> True </default>
		<comment> </comment>
	</object>

	<object>
		<label> convertGrib2FilestoGrib1Files </label>
		<tag> convert grib2 files to grib1 files </tag>
		<description>
If convertGrib2FilestoGrib1Files is True then using
'cnvgrib -g21' command line UMRider will convert grib2
files to grib1 files.

CAUTION : It may produce invalid variables names, grib1
param code for few variables which are produced by this
UMRider conversion tool !
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> False </default>
		<comment> </comment>
	</object>

	<object>
		<label> grib1FilesNameSuffix </label>
		<tag> grib1 files name suffix </tag>
		<description>
If grib1FilesNameSuffix is '.grib1', then grib1 files will
endswith '.grib1' (default).

otherwise whatever string assigned will be added at the 
end of grib1 files name. 

None will add nothing to grib1 file names at the end of it.
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> removeGrib2FilesAfterGrib1FilesCreated </label>
		<tag> remove grib2 files after grib1 files created </tag>
		<description>
If removeGrib2FilesAfterGrib1FilesCreated is True, then grib2
files will be deleted and kept only grib1 files. 

By default True.
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> False </default>
		<comment> </comment>
	</object>


	<object>
		<label> createGrib1CtlIdxFiles </label>
		<tag> create grib1 ctl idx files </tag>
		<description>
If createCtlIdxFiles is True then UMRider will create grads
control files and its index files for each and every grib1 
files by using grib2ctl.pl
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> False </default>
		<comment> </comment>
	</object>

	<object>
		<label> debug </label>
		<tag> debug </tag>
		<description>
This debug option should be either True or False. 
This will just print extra information like variables details,
shape, execution process, etc., while executing the program.
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> False </default>
		<comment> </comment>
	</object>

	<object>
		<label> setGrib2TableParameters </label>
		<tag> set grib2 table parameters </tag>
		<description>
setGrib2TableParameters option takes list of tuples which may
contain WMO-Grib2 table parameters and its value. 

Which means, the grib2 table parameter options will be 
overwritten as per user's setting in this option.

eg1 : setGrib2TableParameters = [('centre', 28), ('subCentre', 0)]
The above two options will be set to out grib2 files.

eg2 : setGrib2TableParameters = [('shapeOfTheEarth', 0)]
The above option will be set to out grib2 files.

CATUION : User must be aware on what are they setting in this
option and its causes in out grib2 files! 

By default this option takes None.
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> wgrib2Arguments </label>
		<tag> wgrib2 command arguments </tag>
		<description>
After successfully created the grib2 (final ordered
variables) file, wgrib2 commnad will be executed with
the 'wgrib2Arguments' options.

pygrib/IRIS/UMRider is able to write grib2 file with 
"grid_simple" packing algorithm, whereas wgrib2 able
to convert packing from "grid_simple" to
"grid_complex_spatial_differencing"
by setting -set_grib_type complex2 option in it. 

The second type packing reduces file size 1/3 compare
to first type packing. And further can be reduced the
file size, by passing -set_bin_prec 12 (compatible
same as ECMWF) which reduces the floating points
precision (which further reduces the file size 1/5 th
of original of first packing). 

By default wgrib2Arguments takes 
"-set_grib_type complex2 -grib_out" as argument.
User can override this option by including extra wgrib2
arguments Or None (wgrib2 will not be executed).

-grib_out is important argument (to be compress,
set precsion, etc).

For more details see,
http://www.cpc.ncep.noaa.gov/products/wesley/wgrib2/speed.html
http://www.cpc.ncep.noaa.gov/products/wesley/wgrib2/set_bin_prec.html

For global post out, we are not passing 
-set_bin_prec 12 option, because we should not loose 
floating precision information.
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> callBackScript </label>
		<tag> call back script </tag>
		<description>
This callBackScript option takes any user defined script
(any script)!

User should provide absolute or relative path of their 
script and make sure that script is self executable with 
shebang and executable permission!

After successfully created out grib2 files, this
callBackScript will be executed with possibly command
line keyword arguments as follows

KWargs : (date, outpath, oftype, utc)
where '--date'    -> out files processed date,
      '--outpath' -> out files path,
      '--oftype'  -> 'analysis' or 'forecast'
      '--utc'     -> UTC cycle value in string
                 ('00' or '06' or '12' or '18')
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>
	
</objects>

</ensemble>


<custom>

<varsfile> description_global_vars.xml </varsfile>
<bsub> description_global_bsubs.xml </bsub>
<objects>

	<object>
		<label> UMInAnlFiles </label>
		<tag> UM analysis files </tag>
		<description> 
UMInAnlFiles takes list of absolute filenames which has
correct analysis fieldsfile/pp file of UM model valid
at 00UTC.

None option will take hardcoded proper infile names.
		</description>
		<inputType> checkbox </inputType>
		<script> </script>
		<validVals>
			<validVal> qwqg00.pp0 </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> UMInShortFcstFiles </label>
		<tag> UM Short forecast files </tag>
		<description>
UMInShortFcstFiles takes list of partial filenames which has
short forecast (kind of analysis) fieldsfile/pp files of UM 
model produced for 00UTC, 06UTC, 12UTC, 18UTC.

None option will take hardcoded proper infile names.
		</description>
		<inputType> checkbox </inputType>
		<script> </script>
		<validVals>
			<validVal> umglca_pb </validVal>
			<validVal> umglca_pd </validVal>
			<validVal> umglca_pe </validVal>
			<validVal> umglca_pf </validVal>
			<validVal> umglca_pi </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> UMInLongFcstFiles </label>
		<tag> UM long forecast files </tag>
		<description>
UMInLongFcstFiles takes list of partial filenames which has
long forecast fieldsfile/pp file of UM model based on 
reference time at 00UTC, 12UTC.

None option will take hardcoded proper infile names.
		</description>
		<inputType> checkbox </inputType>
		<script> </script>
		<validVals>
			<validVal> umglaa_pb </validVal>
			<validVal> umglaa_pd </validVal>
			<validVal> umglaa_pe </validVal>
			<validVal> umglaa_pf </validVal>
			<validVal> umglaa_pi </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> inPath </label>
		<tag> input files path </tag>
		<description>
Model pp filedsfiles path till date timestamp directory.

For NCUM Global inPath = /gpfs3/home/umfcst/NCUM/fcst/
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> outPath </label>
		<tag> output files path </tag>
		<description>
Model grib2 files path where all grib2/nc files will be stored.

For eg : /gpfs4/home/[USERNAME]/UMRiderOutput/g2files/
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> tmpPath </label>
		<tag> temp path </tag>
		<description>
Temporary directory (used to create temporary log files)

You can checkout the log files in case of bsub jobs get failed.

For eg : /gpfs4/home/[USERNAME]/UMRiderOutput/logs/
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> anl_step_hour </label>
		<tag> analysis step hour </tag>
		<description>
Analysis step/interval hours. By default it takes 6 hour which
mean um2grb2 produce 6 hourly instantaneous and/or 6 hourly
average and/or 6 hourly accumulation values analysis files.

If user specfied as 3 then it will extract only 3 houlry 
instantaneous fields.

By default model produced 3 hourly average/accumulation.

Note: the average and accumulation supports only for 6 hours!
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> anl_aavars_reference_time </label>
		<tag> analysis aavars reference time </tag>
		<description>
anl_aavars_reference_time takes either 'analysis' or 
'shortforecast'. When some variables are taken from previous
cycle short-forecast (average/accumulation) vars, the 
reference time need to be set as either current 'analysis'
reference cycle (utc) or previous cycle's 'shortforecast'
reference time.

'shortforecast' gives exactly based on which utc that 
variable has processed, whereas 'analysis' shift reference
time utc as actual analysis utc time.

Note : This option applicable only to average/accumulation
vars in analysis grib2 files.

Lets keep default option (i.e. shortforecast)
		</description>
		<inputType> radio </inputType>
		<script> </script>
		<validVals>
			<validVal> shortforecast </validVal>
			<validVal> analysis </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> anl_aavars_time_bounds </label>
		<tag> analysis aavars time bounds </tag>
		<description>
anl_aavars_time_bounds takes either 'True' or 'False'. 
By default, True keeps the analysis time bounds, reference
time bounds and False removes it (so that it become 
instantaneous instead of average/accumulation vars).

False will be applicable only if anl_aavars_reference_time
arg passed as 'analysis'.

Note : This option applicable only to average/accumulation
vars in analysis grib2 files.

For post prodction, we enabled the time bounds with True.
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> fcst_step_hour </label>
		<tag> forecast step hour </tag>
		<description>
long forecast step/interval hours . By default it
takes 6 hour which mean UMRider produce 6 hourly instantaneous
and/or 6 hourly average and/or 6 hourly accumulation values.

If user specfied as 3 or 24 then it will extract only 3 or 24
hourly instantaneous fields and for calculate average / 
accumulation for 24 hourly.

By default model produced 3 hourly average/accumulation.

Note: the average and accumulation supports only for either 
3 or 6 or 24 hours.
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> start_long_fcst_hour </label>
		<tag> start of long forecast hour </tag>
		<description>
long forecast start hour. By default it takes 6 hour which
mean UMRider produce grib2 files from 06-th hour forecasts.

If user wants from different hours, then they can specify it!

It should be multiples of 'fcst_step_hour' (see above option).
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> end_long_fcst_hour_at_00z </label>
		<tag> end of long forecast hour at 00 </tag>
		<description>
Maximum long forecast hours at 00 utc cycle produced by NCUM
model for 10 days forecast 240 hour (by default 240 hours).
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> end_long_fcst_hour_at_12z </label>
		<tag> end of long forecast hour at 12 </tag>
		<description>
Maximum long forecast hours at 12utc cycle produced by NCUM
model for 5 days forecast 120 hour (by default 120 hours).
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> latitude </label>
		<tag> latitudes </tag>
		<description>
latitude takes required range of latitude which user wants to
extract from the model global data. 
By default it takes None (i.e. extract model global latitudes).

User can specify their required latitude in tuple!

For eg1 : latitude = (-30, 30) will extract only latitudes
from 30S to 30N. (i.e South to North)

For eg2 : latitude = (30, -30) will extract only latitudes
from 30N to 30S. (i.e North to South)

		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> longitude </label>
		<tag> longitudes </tag>
		<description>
longitude takes required range of longitude which user wants
to extract from the model global data. 
By default it takes None (i.e. extract model global 
longitudes).

User can specify their required longitude in tuple!

For eg : longitude = (60, 100) will extract only longitude
from 60E to 100E.

Note : Model requires longitude should specfied based on
(0 to 360), and not by (-180 to 180.) 

In future I may fix it, if user wish to specify longitude
by within range of (-180, 180) !?
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> targetGridResolution </label>
		<tag> target grid's resolution </tag>
		<description>
targetGridResolution is resolution in degree 
(1 degree = 100km approx).

if targetGridResolution is set to None, then model resolution
will be kept in the grib2 file. This must be a number or None.

WARNING :  targetGridResolution option will be disabled 
           if targetGridFile option is enabled (see below).
		</description>
		<inputType> float </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> targetGridFile </label>
		<tag> target of grid file </tag>
		<description>
targetGridFile should be path of sample grib2/pp/ff/nc file,
which contains atleast one variable with latitude, longitude
informations. 

Model variables will be converted to this target grid file's
resolution including spatial regrid, start-end of 
latitude-and-longitude.
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> extraPolateMethod </label>
		<tag> extra polation method </tag>
		<description>
extraPolateMethod takes either 'auto' or 'linear' or 'mask' or
iris supported interpolation method. 
'linear' means all variables will be linearly extrapolated
over masked regions also. 'mask' means all masked variables
of model outputs, will not be extrapolated over masked regions.

'auto' will take care properly the neccessary variabels will
be extrapolated over masked regions and remaining variables 
will be masked over mask regions. 

Note : 'auto' options is suggested one!
		</description>
		<inputType> radio </inputType>
		<script> </script>
		<validVals>
			<validVal> auto </validVal>
			<validVal> linear </validVal>
			<validVal> mask </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> pressureLevels </label>
		<tag> pressure levels </tag>
		<description>
pressureLevels is required pressure levels slice / extract
only particular set of pressure levels from model pressure
levels. User can specify either one or more levels. 

By default it takes None, i.e. it will extract all the
model pressure levels.

For eg 1 : pressureLevels = [850] -> extract 850 hPa only.
For eg 2 : pressureLevels = [850, 500, 200] -> extract 
850, 500, 200 hPa levels only.

Note 1 : These pressure slice levels applicable to all the
         pressure level variables.
         
Note 2 : At the moment pressure levels interpolation is not 
         supported yet!
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> fillFullyMaskedVars </label>
		<tag> fill fully masked vars with </tag>
		<description>
If some variable has fully masked (for eg: Incoming Shortwave
flux during night time) then this option value will be set to
that variable. 

By default it takes None, which won't do anything. 

If it has set to 0 as value, then those fully masked vars 
will be filled with this value (zero).
		</description>
		<inputType> pinteger </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> soilFirstSecondFixedSurfaceUnit </label>
		<tag> soil first and second fixed surface height unit </tag>
		<description>
soilFirstSecondFixedSurfaceUnit takes either 'cm' or 'mm'. 
By default it takes 'cm' argument (suggested for general 
purpose/ WRF-Noah supported).

For soil moisture/ soil temeperature variables depth 
below land surface, units are initially set to either 
'cm' (centimeter) or 'mm' (millimeter), and finally 
converted to 'm' (meter) in wgrib2. 

But anyhow if grib2 files will be read by some other utility
other than wgrib2, then this first and second fixed surface 
unit plays matter. So suggested unit is 'cm'.
		</description>
		<inputType> radio </inputType>
		<script> </script>
		<validVals>
			<validVal> m </validVal>
			<validVal> cm </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> loadg2utils </label>
		<tag> load g2utils </tag>
		<description>
Load g2utils from 'system' python which has installed through
setup.py (OR) load g2utils from 'local' previous directory
for the operational purpose, where normal user do not have
write permission to change the g2utils!

So loadg2utils argument should be either 'system' or 'local'.

Note : Use 'local' for Bhaskara HPC. 
		</description>
		<inputType> radio </inputType>
		<script> </script>
		<validVals>
			<validVal> local </validVal>
			<validVal> system </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> overwriteFiles </label>
		<tag> overwrite out files </tag>
		<description>
If overwriteFiles option is 'True' then existing output 
final files (if any) will be deleted from outPath and 
re-creating outfiles freshly.

If overwriteFiles option is 'False' and all output final 
files already exist in the outPath, then program will exit
without re-creating the output files.

If partially created files exist (like few hours outfiles 
only exist or intermediate nc files) then by default make 
overwriteFiles option as True (though False as passed to 
overwriteFiles option).
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

    <object>
		<label> anlOutGrib2FilesNameStructure </label>
		<tag> anlysis out grib2 files name structure </tag>
		<description>
Defining analysis grib2 fileName structure.
Must be in single line.

anlOutGrib2FilesNameStructure takes list of string naming
arguments to construct out file names. um2grb2 will just
concatinate the arguments, by replacing 5 predefined naming
structure ('*DD*', '*HHH*', '*YYYYMMDD*', '*ZZ*', '*pxp*') 
with its corresponding values/numbers inplace of it.

'*H*' - forecast hours
'*YYYYMMDD*' - forecast reference date 
'*Z*' - forecast reference utc time (optional)
'*D*' - forecast days (optional)
'*pXp*' - latitude x longitude grid resolution (optional)

If user wants to 3 digit filled hours, then they need to 
specify as 3 times '*HHH*'. If they specify 2 digit filled
hours (say '*HH*' only), but forecast hours have 3 digit, 
then by default it will assume as 3 digits but for single 
digit hour, it will fill 0 as prefix to make it as 2 digit.

Similar options for utc '*Z*' and '*D*'.


Note : * will not be included in the name of the final 
out grib2 files.

eg1 :  ('um_ana', '_', '*HHH*', 'hr', '_', '*YYYYMMDD*', '_', '*ZZ*', 'Z', '.grib2')
this will produce analysis files as 'um_ana_006hr_20160208_12Z.grib2'

eg2 : ('fcs', '_', '*HH*', 'h', '_z', '*YYYYMMDD*', '.grb2') 
this will produce forecast files as 'fcs_06h_z20160208.grb2'


eg3 : ('prg', '*D*', '00z', '*%d%m%y*', '.grb2') will produce 
grib2 files as 'prg100z080216.grb2'

eg4 : ('prg', '*D*', '00z', '*%d%m%y*', '_', '*pXp*' '.grb2') 
will produce grib2 files as 'prg100z080216_0p17x0p17.grb2' 
in case of targetGridResolution = None (i.e modelResolution)  
or as 'prg100z080216_2p5x2p5.grb2' in case of 
targetGridResolution = 2.5
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>
    
    <object>
		<label> fcstOutGrib2FilesNameStructure </label>
		<tag> fcst out grib2 files name structure </tag>
		<description>
Defining forecast grib2 fileName structure.
Must be in single line.

Same description as above option (anlOutGrib2FilesNameStructure)

For eg : ('um_prg', '_', '*HHH*', 'hr', '_', '*YYYYMMDD*', '_', '*ZZ*', 'Z', '.grib2')
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> createGrib2CtlIdxFiles </label>
		<tag> create grib2 ctl idx files </tag>
		<description>
If createCtlIdxFiles is True then UMRider will create grads
control files and its index files for each and every grib2 
files by using g2ctl.pl
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> convertGrib2FilestoGrib1Files </label>
		<tag> convert grib2 files to grib1 files </tag>
		<description>
If convertGrib2FilestoGrib1Files is True then using
'cnvgrib -g21' command line UMRider will convert grib2
files to grib1 files.

CAUTION : It may produce invalid variables names, grib1
param code for few variables which are produced by this
UMRider conversion tool !
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> grib1FilesNameSuffix </label>
		<tag> grib1 files name suffix </tag>
		<description>
If grib1FilesNameSuffix is '.grib1', then grib1 files will
endswith '.grib1' (default).

otherwise whatever string assigned will be added at the 
end of grib1 files name. 

None will add nothing to grib1 file names at the end of it.
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> removeGrib2FilesAfterGrib1FilesCreated </label>
		<tag> remove grib2 files after grib1 files created </tag>
		<description>
If removeGrib2FilesAfterGrib1FilesCreated is True, then grib2
files will be deleted and kept only grib1 files. 

By default False.
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>


	<object>
		<label> createGrib1CtlIdxFiles </label>
		<tag> create grib1 ctl idx files </tag>
		<description>
If createCtlIdxFiles is True then UMRider will create grads
control files and its index files for each and every grib1 
files by using grib2ctl.pl
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> debug </label>
		<tag> debug </tag>
		<description>
This debug option should be either True or False. 
This will just print extra information like variables details,
shape, execution process, etc., while executing the program.
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> setGrib2TableParameters </label>
		<tag> set grib2 table parameters </tag>
		<description>
setGrib2TableParameters option takes list of tuples which may
contain WMO-Grib2 table parameters and its value. 

Which means, the grib2 table parameter options will be 
overwritten as per user's setting in this option.

eg1 : setGrib2TableParameters = [('centre', 28), ('subCentre', 0)]
The above two options will be set to out grib2 files.

eg2 : setGrib2TableParameters = [('shapeOfTheEarth', 0)]
The above option will be set to out grib2 files.

CATUION : User must be aware on what are they setting in this
option and its causes in out grib2 files! 

By default this option takes None.
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

	<object>
		<label> wgrib2Arguments </label>
		<tag> wgrib2 command arguments </tag>
		<description>
After successfully created the grib2 (final ordered
variables) file, wgrib2 commnad will be executed with
the 'wgrib2Arguments' options.

pygrib/IRIS/UMRider is able to write grib2 file with 
"grid_simple" packing algorithm, whereas wgrib2 able
to convert packing from "grid_simple" to
"grid_complex_spatial_differencing"
by setting -set_grib_type complex2 option in it. 

The second type packing reduces file size 1/3 compare
to first type packing. And further can be reduced the
file size, by passing -set_bin_prec 12 (compatible
same as ECMWF) which reduces the floating points
precision (which further reduces the file size 1/5 th
of original of first packing). 

By default wgrib2Arguments takes 
"-set_grib_type complex2 -grib_out" as argument.
User can override this option by including extra wgrib2
arguments Or None (wgrib2 will not be executed).

-grib_out is important argument (to be compress,
set precsion, etc).

For more details see,
http://www.cpc.ncep.noaa.gov/products/wesley/wgrib2/speed.html
http://www.cpc.ncep.noaa.gov/products/wesley/wgrib2/set_bin_prec.html

For global post out, we are not passing 
-set_bin_prec 12 option, because we should not loose 
floating precision information.
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

<object>
		<label> wgrib2netcdf </label>
		<tag> wgrib2netcdf </tag>
		<description>
if wgrib2netcdf enabled then grib2 file will be converted to netcdf via 
wgrib2 command and removed the grib2 source files.
		</description>
		<inputType> boolean </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default>False</default>
		<comment> </comment>
	</object>

	<object>
		<label> callBackScript </label>
		<tag> call back script </tag>
		<description>
This callBackScript option takes any user defined script
(any script)!

User should provide absolute or relative path of their 
script and make sure that script is self executable with 
shebang and executable permission!

After successfully created out grib2 files, this
callBackScript will be executed with possibly command
line keyword arguments as follows

KWargs : (date, outpath, oftype, utc)
where '--date'    -> out files processed date,
      '--outpath' -> out files path,
      '--oftype'  -> 'analysis' or 'forecast'
      '--utc'     -> UTC cycle value in string
                 ('00' or '06' or '12' or '18')
		</description>
		<inputType> text </inputType>
		<script> </script>
		<validVals>
			<validVal>  </validVal>
			<validVal>  </validVal>
			<validVal>  </validVal>
		</validVals>
		<default> </default>
		<comment> </comment>
	</object>

</objects>

</custom>



</form>
